on:
  workflow_call:
    inputs:
      image_tag:
        description: Build app type
        required: true
        type: string

jobs:
  Builder:
    concurrency: Builder
    runs-on: ubuntu-latest
    steps:
      - id: vars
        run: |
          echo cache_name=${{ inputs.image_tag }}-$(git describe --tags --abbrev=0 || echo HEAD) >> $GITHUB_OUTPUT
          echo image_1_container=${{ github.event.repository.name }}/image1 >> $GITHUB_OUTPUT
          echo image_2_container=${{ github.event.repository.name }}/image2 >> $GITHUB_OUTPUT
          echo repository=ghcr.io/${{ github.repository_owner }} >> $GITHUB_OUTPUT
          echo user_name=$(whoami) >> $GITHUB_OUTPUT
          echo user_gid=$(id -g) >> $GITHUB_OUTPUT
          echo user_uid=$(id -u) >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3.1.0
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push images to GitHub Container Registry
        uses: docker/bake-action@v2.3.0
        with:
          files: docker-compose.yml
          load: true
          set: |
            *.platform=linux/amd64
            image1.args.APP_TYPE=${{ inputs.image_tag }}
            image1.args.USER=${{ steps.vars.outputs.user_name }}
            image1.args.USER_GID=${{ steps.vars.outputs.user_gid }}
            image1.args.USER_UID=${{ steps.vars.outputs.user_uid }}
            image1.cache-from=ref=${{ steps.vars.outputs.repository }}/${{ steps.vars.outputs.image_1_container }}:cache,type=registry
            image1.cache-to=mode=max,ref=${{ steps.vars.outputs.repository }}/${{ steps.vars.outputs.image_1_container }}:cache,type=registry
            image1.pull=true
            image1.tags=${{ steps.vars.outputs.repository }}/${{ steps.vars.outputs.image_1_container }}:${{ inputs.image_tag }}
            image2.cache-from=ref=${{ steps.vars.outputs.repository }}/${{ steps.vars.outputs.image_1_container }}:cache,type=registry
            image2.cache-to=mode=max,ref=${{ steps.vars.outputs.repository }}/${{ steps.vars.outputs.image_1_container }}:cache,type=registry
            image2.pull=true
            image2.tags=${{ steps.vars.outputs.repository }}/${{ steps.vars.outputs.image_1_container }}:${{ inputs.image_tag }}
          targets: image1,image2
      - if: ${{ inputs.image_tag == 'tester'}}
        id: cached-poetry-and-venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ steps.vars.outputs.cache_name }}
      - run: |
          docker-compose run --rm --volume ${PWD}:/home/${{ steps.vars.outputs.user_name }}/app  --workdir /home/${{ steps.vars.outputs.user_name }}/app image1 poetry install

        
      # - name: Prune Gunicorn untagged images from GHCR
      #   continue-on-error: true
      #   uses: vlaurin/action-ghcr-prune@v0.4.0
      #   with:
      #     container: ${{ env.IMAGE_1_CONTAINER }}
      #     dry-run: false # Dry-run first, then change to `false`
      #     organization: ${{ github.repository_owner }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     untagged: true