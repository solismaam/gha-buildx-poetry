on:
  workflow_call:
    inputs:
      image_tag:
        description: Build app type
        required: true
        type: string
      

jobs:
  App:
    concurrency: App
    runs-on: ubuntu-latest
    steps:
      - name: Prepare builder vars
        id: vars
        run: |
          echo "Set GITHUB_OUTPUT..."
          echo CACHE_NAME=${CONTAINER_TAG_REF/\//_}-cache >> ${GITHUB_OUTPUT}
          echo CONTAINER_IMAGE_NAME_IMAGE_1=${CONTAINER_IMAGE_NAME_IMAGE_1} >> ${GITHUB_OUTPUT}
          echo CONTAINER_IMAGE_NAME_IMAGE_2=${CONTAINER_IMAGE_NAME_IMAGE_1} >> ${GITHUB_OUTPUT}
          echo CONTAINER_IMAGE_TAG=${CONTAINER_TAG_REF/\//_} >> ${GITHUB_OUTPUT}
          echo CONTAINER_REPOSITORY_NAME=${CONTAINER_REPOSITORY_NAME} >> ${GITHUB_OUTPUT}
          echo CONTAINER_REPOSITORY_NAME_IMAGE_1=${CONTAINER_REPOSITORY_NAME}/${CONTAINER_IMAGE_NAME_IMAGE_1} >> ${GITHUB_OUTPUT}
          echo CONTAINER_REPOSITORY_NAME_IMAGE_2=${CONTAINER_REPOSITORY_NAME}/${CONTAINER_IMAGE_NAME_IMAGE_2} >> ${GITHUB_OUTPUT}
          echo CONTAINER_RUNNER=$(whoami) >> ${GITHUB_OUTPUT}
          echo CONTAINER_RUNNER_GID=$(test "${{ inputs.image_tag }}" != "release" && id -g || echo 1000) >> ${GITHUB_OUTPUT}
          echo CONTAINER_RUNNER_UID=$(test "${{ inputs.image_tag }}" != "release" && id -u || echo 1000) >> ${GITHUB_OUTPUT}
          cat ${GITHUB_OUTPUT}
        env:
          CONTAINER_IMAGE_NAME_IMAGE_1: ${{ github.event.repository.name }}/image1
          CONTAINER_IMAGE_NAME_IMAGE_2: ${{ github.event.repository.name }}/image2
          CONTAINER_REPOSITORY_NAME: ghcr.io/${{ github.repository_owner }}
          CONTAINER_TAG_REF: ${{ github.head_ref || github.base_ref }}-${{ inputs.image_tag }}

      - name: Checkout
        uses: actions/checkout@v3.1.0
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push images to GitHub Container Registry
        uses: docker/bake-action@v2.3.0
        with:
          files: docker-compose.yml
          load: ${{ inputs.image_tag != 'release'}}
          push: ${{ inputs.image_tag == 'release'}}
          set: |
            *.platform=linux/amd64
            image1.args.APP_TYPE=${{ inputs.image_tag }}
            image1.args.USER=${{ steps.vars.outputs.CONTAINER_RUNNER }}
            image1.args.USER_GID=${{ steps.vars.outputs.CONTAINER_RUNNER_GID }}
            image1.args.USER_UID=${{ steps.vars.outputs.CONTAINER_RUNNER_UID }}
            image1.cache-from=ref=${{ steps.vars.outputs.CONTAINER_REPOSITORY_NAME_IMAGE_1 }}:main-${{ inputs.image_tag }}-cache,type=registry
            image1.cache-from=ref=${{ steps.vars.outputs.CONTAINER_REPOSITORY_NAME_IMAGE_1 }}:${{ steps.vars.outputs.CACHE_NAME }},type=registry
            image1.cache-to=mode=max,ref=${{ steps.vars.outputs.CONTAINER_REPOSITORY_NAME_IMAGE_1 }}:${{ steps.vars.outputs.CACHE_NAME }},type=registry
            image1.pull=true
            image1.tags=${{ steps.vars.outputs.CONTAINER_REPOSITORY_NAME_IMAGE_1 }}:${{ steps.vars.outputs.CONTAINER_IMAGE_TAG }}
            
            image2.cache-from=ref=${{ steps.vars.outputs.CONTAINER_REPOSITORY_NAME_IMAGE_2 }}:main-${{ inputs.image_tag }}-cache,type=registry
            image2.cache-from=ref=${{ steps.vars.outputs.CONTAINER_REPOSITORY_NAME_IMAGE_2 }}:${{ steps.vars.outputs.CACHE_NAME }},type=registry
            image2.cache-to=mode=max,ref=${{ steps.vars.outputs.CONTAINER_REPOSITORY_NAME_IMAGE_2 }}:${{ steps.vars.outputs.CACHE_NAME }},type=registry
            image2.pull=true
            image2.tags=${{ steps.vars.outputs.CONTAINER_REPOSITORY_NAME_IMAGE_2 }}:${{ steps.vars.outputs.CONTAINER_IMAGE_TAG }}
          targets: image1,image2
      - name: Load cache
        if: ${{ inputs.image_tag != 'release'}}
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ steps.vars.outputs.cache_name }}-${{ hashFiles('poetry.lock') }}
      - name: Run app
        env:
          IMAGE_TAG: ${{ steps.vars.output.CONTAINER_IMAGE_TAG }}
          IMAGE_1_REPOSITORY: ${{ steps.vars.outputs.CONTAINER_REPOSITORY_NAME_IMAGE_1 }}
          IMAGE_2_REPOSITORY: ${{ steps.vars.outputs.CONTAINER_REPOSITORY_NAME_IMAGE_2 }}
        if: ${{ inputs.image_tag != 'release'}}
        run: |
          docker-compose run \
            --rm \
            --volume ${PWD}:/home/${USER}/app \
            --workdir /home/${USER}/app \
            image1        
